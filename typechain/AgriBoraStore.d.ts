/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AgriBoraStoreInterface extends ethers.utils.Interface {
  functions: {
    "addFarm(string,string)": FunctionFragment;
    "addProduce(string,uint256,string)": FunctionFragment;
    "agriBoraAddress()": FunctionFragment;
    "getFarm(string)": FunctionFragment;
    "getInsured(uint256)": FunctionFragment;
    "getLoanProduce(string)": FunctionFragment;
    "getProduce(string)": FunctionFragment;
    "insureFarm(string,string,uint256)": FunctionFragment;
    "loanProduce(string,string)": FunctionFragment;
    "lockInvestment(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutInsured(uint256)": FunctionFragment;
    "sellProduce(string,string,uint256)": FunctionFragment;
    "stock(string)": FunctionFragment;
    "unLockInvestment(address,uint256)": FunctionFragment;
    "withdrawAmount(string,uint256)": FunctionFragment;
    "withdrawProduces(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFarm",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProduce",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "agriBoraAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFarm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInsured",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanProduce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getProduce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "insureFarm",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanProduce",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInvestment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutInsured",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellProduce",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unLockInvestment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProduces",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProduce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agriBoraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInsured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insureFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutInsured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unLockInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProduces",
    data: BytesLike
  ): Result;

  events: {};
}

export class AgriBoraStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AgriBoraStoreInterface;

  functions: {
    addFarm(
      name: string,
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProduce(
      name: string,
      cost: BigNumberish,
      farmSize: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    agriBoraAddress(overrides?: CallOverrides): Promise<[string]>;

    getFarm(
      phone: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber] & {
          name: string;
          phone: string;
          balance: BigNumber;
        }
      ]
    >;

    getInsured(
      date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[([string, string] & { name: string; phone: string })[]]>;

    getLoanProduce(
      phone: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          name: string;
          cost: BigNumber;
          farmSize: string;
        }
      ]
    >;

    getProduce(
      name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          name: string;
          cost: BigNumber;
          farmSize: string;
        }
      ]
    >;

    insureFarm(
      phone: string,
      name: string,
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanProduce(
      phone: string,
      item: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payoutInsured(
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellProduce(
      phone: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        cost: BigNumber;
        farmSize: string;
      }
    >;

    unLockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAmount(
      phone: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProduces(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFarm(
    name: string,
    phone: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProduce(
    name: string,
    cost: BigNumberish,
    farmSize: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  agriBoraAddress(overrides?: CallOverrides): Promise<string>;

  getFarm(
    phone: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      name: string;
      phone: string;
      balance: BigNumber;
    }
  >;

  getInsured(
    date: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, string] & { name: string; phone: string })[]>;

  getLoanProduce(
    phone: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      name: string;
      cost: BigNumber;
      farmSize: string;
    }
  >;

  getProduce(
    name: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      name: string;
      cost: BigNumber;
      farmSize: string;
    }
  >;

  insureFarm(
    phone: string,
    name: string,
    date: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanProduce(
    phone: string,
    item: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockInvestment(
    investor: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutInsured(
    date: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellProduce(
    phone: string,
    name: string,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      name: string;
      cost: BigNumber;
      farmSize: string;
    }
  >;

  unLockInvestment(
    investor: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAmount(
    phone: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProduces(
    phone: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFarm(
      name: string,
      phone: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProduce(
      name: string,
      cost: BigNumberish,
      farmSize: string,
      overrides?: CallOverrides
    ): Promise<void>;

    agriBoraAddress(overrides?: CallOverrides): Promise<string>;

    getFarm(
      phone: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        phone: string;
        balance: BigNumber;
      }
    >;

    getInsured(
      date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, string] & { name: string; phone: string })[]>;

    getLoanProduce(
      phone: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        cost: BigNumber;
        farmSize: string;
      }
    >;

    getProduce(
      name: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        cost: BigNumber;
        farmSize: string;
      }
    >;

    insureFarm(
      phone: string,
      name: string,
      date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loanProduce(
      phone: string,
      item: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutInsured(date: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sellProduce(
      phone: string,
      name: string,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        name: string;
        cost: BigNumber;
        farmSize: string;
      }
    >;

    unLockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAmount(
      phone: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProduces(phone: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addFarm(
      name: string,
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProduce(
      name: string,
      cost: BigNumberish,
      farmSize: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    agriBoraAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFarm(phone: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInsured(
      date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanProduce(
      phone: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProduce(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    insureFarm(
      phone: string,
      name: string,
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanProduce(
      phone: string,
      item: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payoutInsured(
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellProduce(
      phone: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unLockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAmount(
      phone: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProduces(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFarm(
      name: string,
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProduce(
      name: string,
      cost: BigNumberish,
      farmSize: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    agriBoraAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFarm(
      phone: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInsured(
      date: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanProduce(
      phone: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProduce(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insureFarm(
      phone: string,
      name: string,
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanProduce(
      phone: string,
      item: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutInsured(
      date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellProduce(
      phone: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unLockInvestment(
      investor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAmount(
      phone: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProduces(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
